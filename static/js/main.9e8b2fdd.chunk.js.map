{"version":3,"sources":["dataOfSounds/index.js","components/display.js","components/trigger.js","components/buttons.js","components/main.js","containers/MainContainer.js","actions/index.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["keysTrigger","dataSounds1","keyCode","keyTrigger","id","url","dataSounds2","Display","Trigger","triggerHandle","className","ToggleButtonGroup","type","name","onChange","defaultValue","ToggleButton","value","Buttons","dataUrl","letterVal","dataName","handleClickOfButtons","data-letter","data-name","onClick","src","Main","props","console","log","Container","Row","Col","md","xs","map","val","i","key","bankSound","handleClick","playSound","letter","document","getElementById","play","App","e","triggerDataSoundsDisptch","addEventListener","this","handleKeyDown","removeChild","toUpperCase","includes","target","dataset","innerHTML","React","Component","connect","state","dispatch","triggerDataSounds","initialState","reducer","action","Object","assign","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e8b2fdd.chunk.js","sourcesContent":["const keysTrigger = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'];\r\n\r\nconst dataSounds1 = [{\r\n  keyCode: 81,\r\n  keyTrigger: 'Q',\r\n  id: 'Heater-1',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n}, {\r\n  keyCode: 87,\r\n  keyTrigger: 'W',\r\n  id: 'Heater-2',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n}, {\r\n  keyCode: 69,\r\n  keyTrigger: 'E',\r\n  id: 'Heater-3',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n}, {\r\n  keyCode: 65,\r\n  keyTrigger: 'A',\r\n  id: 'Heater-4',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n}, {\r\n  keyCode: 83,\r\n  keyTrigger: 'S',\r\n  id: 'Clap',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n}, {\r\n  keyCode: 68,\r\n  keyTrigger: 'D',\r\n  id: 'Open-HH',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n}, {\r\n  keyCode: 90,\r\n  keyTrigger: 'Z',\r\n  id: \"Kick-n'-Hat\",\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n}, {\r\n  keyCode: 88,\r\n  keyTrigger: 'X',\r\n  id: 'Kick',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n}, {\r\n  keyCode: 67,\r\n  keyTrigger: 'C',\r\n  id: 'Closed-HH',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n},\r\n];\r\n\r\nconst dataSounds2 = [{\r\n  keyCode: 81,\r\n  keyTrigger: 'Q',\r\n  id: 'Chord-1',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n}, {\r\n  keyCode: 87,\r\n  keyTrigger: 'W',\r\n  id: 'Chord-2',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n}, {\r\n  keyCode: 69,\r\n  keyTrigger: 'E',\r\n  id: 'Chord-3',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n}, {\r\n  keyCode: 65,\r\n  keyTrigger: 'A',\r\n  id: 'Shaker',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n}, {\r\n  keyCode: 83,\r\n  keyTrigger: 'S',\r\n  id: 'Open-HH',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\r\n}, {\r\n  keyCode: 68,\r\n  keyTrigger: 'D',\r\n  id: 'Closed-HH',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n  keyCode: 90,\r\n  keyTrigger: 'Z',\r\n  id: 'Punchy-Kick',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n}, {\r\n  keyCode: 88,\r\n  keyTrigger: 'X',\r\n  id: 'Side-Stick',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\r\n}, {\r\n  keyCode: 67,\r\n  keyTrigger: 'C',\r\n  id: 'Snare',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n}];\r\n\r\nexport { dataSounds1, dataSounds2, keysTrigger };","import React from 'react';\r\n\r\nconst Display = () => (\r\n  <div id=\"display\">\r\n\r\n  </div>\r\n)\r\n\r\nexport default Display;","import React from 'react';\r\nimport {ToggleButton, ToggleButtonGroup, } from 'react-bootstrap';\r\n\r\nconst Trigger = ({ triggerHandle }) => (\r\n  <div className=\"trigger\">\r\n    <ToggleButtonGroup className=\"btn-secondary\" type=\"radio\" name=\"soundBanks\" onChange={triggerHandle} defaultValue={[1]}>\r\n      <ToggleButton className=\"\" value={1}> низкие  </ToggleButton>\r\n      \r\n      <ToggleButton value={2}> высокие </ToggleButton>\r\n    </ToggleButtonGroup>\r\n    \r\n  </div>\r\n)\r\n\r\nexport default Trigger;","import React from 'react';\r\n\r\nconst Buttons = ({dataUrl, letterVal, dataName, handleClickOfButtons, id}) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        id={id}\r\n        data-letter={letterVal}\r\n        className='button drum-pad'  \r\n        data-name={dataName} \r\n        onClick={handleClickOfButtons}\r\n      >\r\n          {letterVal}\r\n          <audio className=\"clip\" src={dataUrl} id={letterVal}></audio>\r\n      </button>\r\n    </div>\r\n  \r\n  )\r\n}\r\n\r\nexport { Buttons };","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nimport  { keysTrigger } from '../dataOfSounds';\r\n\r\nimport Display from './display';\r\nimport Trigger from './trigger';\r\nimport { Buttons } from './buttons';\r\n\r\n\r\nconst Main = (props) => {\r\n  console.log(props)\r\n  return (\r\n    <Container id='drum-machine'>\r\n      <Row className=\"align-items-center\">\r\n        <Col md={6} xs={12} className='wrapper'>\r\n        { keysTrigger.map( (val, i) => (\r\n              <Buttons \r\n                key={i}\r\n                id={props.bankSound[i].id}\r\n                dataUrl={props.bankSound[i].url}\r\n                dataName={props.bankSound[i].id}\r\n                handleClickOfButtons={props.handleClick}\r\n                letterVal={val}\r\n              />\r\n            )\r\n          )\r\n        }\r\n        </Col>\r\n        <Col  md={6} className=\"\">\r\n          <Trigger \r\n            triggerHandle={props.triggerHandle}\r\n          />\r\n          <Display />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  ) \r\n}        \r\n\r\n\r\nexport default Main;","\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { keysTrigger } from '../dataOfSounds';\r\nimport { triggerDataSounds } from '../actions';\r\nimport Main from '../components/main';\r\n\r\n//находит элемент аудио и воспроизводит звук\r\nfunction playSound(letter) {\r\n  let sound = document.getElementById(letter);\r\n  sound.play();\r\n}\r\n\r\n//нахожу display и отпраляю туда текст звука\r\nconst displayNameOfSound = (name) => {\r\n  let display = document.getElementById('display');\r\n  display.innerHTML = `<h3>${name}</h3>`;\r\n}\r\n\r\nclass App extends React.Component {\r\n  \r\n\r\n  componentDidMount() {\r\n    console.log(\"mounted\")\r\n    document.addEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() { \r\n    console.log(\"unmounted\")\r\n    document.removeChild(\"keydown\", this.handleKeyDown);\r\n  }\r\n  //добаваляет слушатель события нажатия клавиши\r\n  handleKeyDown(e) {\r\n    console.log(e.key.toUpperCase());\r\n    if(keysTrigger.includes(e.key.toUpperCase())) {\r\n      playSound(e.key.toUpperCase());\r\n    }\r\n  }\r\n\r\n  // обрабатывает клик кнопки и вызывает функцию воспроизведения звука и вызывает функцию добавление названия звука\r\n  handleClick(e) {\r\n    console.log(e.target.dataset.letter)\r\n    playSound(e.target.dataset.letter)\r\n    displayNameOfSound(e.target.dataset.name)\r\n  }\r\n\r\n  triggerHandle = (e) => {\r\n    \r\n    this.props.triggerDataSoundsDisptch(e);\r\n    console.log(this.props);\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props)\r\n    \r\n    return (\r\n    <Main \r\n      handleClick={this.handleClick}\r\n      bankSound={this.props.bankSound}\r\n      triggerHandle={this.triggerHandle}\r\n    />\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    bankSound: state.bankSound\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    triggerDataSoundsDisptch: (value) => dispatch(triggerDataSounds(value))\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { dataSounds1, dataSounds2 } from '../dataOfSounds';\r\n\r\n\r\n\r\nexport const triggerDataSounds = (value) => {\r\n  if(value === 1) {\r\n    return ({\r\n      type: \"ONE\",\r\n      bankSound: dataSounds1\r\n    })\r\n  } else if (value === 2) {\r\n    return ({\r\n      type: \"TWO\",\r\n      bankSound: dataSounds2\r\n    })\r\n  }\r\n}\r\n\r\n// export const addAllSounds = (all) => {\r\n//   return ({\r\n//     type: all,\r\n//     soundData: dataSounds\r\n//   })\r\n// }\r\n\r\n// export const addTrigger = (letter) => {\r\n//   let indexLetter = keysTrigger.indexOf(letter);\r\n//   return ({\r\n//     type: letter,\r\n//     soundData: dataSounds[indexLetter] \r\n//   });\r\n// };\r\n\r\n\r\n","\r\n\r\nimport { dataSounds1, dataSounds2 } from '../dataOfSounds';\r\n\r\nconst initialState = { bankSound: dataSounds1};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"TWO\":\r\n      return Object.assign({}, state, { bankSound: dataSounds2 });\r\n    case \"ONE\":\r\n      return Object.assign({}, state, { bankSound: dataSounds1 })\r\n    default:\r\n      return state;\r\n    }\r\n  \r\n}\r\n\r\nexport default reducer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './containers/MainContainer';\r\nimport reducer from './reducers/reducer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}