{"version":3,"sources":["actions/index.js","components/display.js","components/trigger.js","components/buttons.js","components/main.js","containers/MainContainer.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["keysTrigger","bankSound","keyCode","keyTrigger","id","url","Display","Trigger","props","className","ToggleButtonGroup","type","name","defaultValue","ToggleButton","value","Buttons","dataUrl","letterVal","dataName","handleClickOfButtons","data-letter","data-name","onClick","src","Main","console","log","Container","Row","Col","md","map","val","i","key","handleClick","App","document","addEventListener","this","handleKeyDown","removeChild","e","toUpperCase","includes","playSound","target","dataset","letter","displayNameOfSound","addAllSounds","state","React","Component","getElementById","play","innerHTML","connect","dispatch","indexLetter","indexOf","soundData","addTrigger","all","initialState","reducer","action","Object","assign","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0d2bc47.chunk.js","sourcesContent":["\r\nexport const keysTrigger = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'];\r\nexport const bankSound = [{\r\n  keyCode: 81,\r\n  keyTrigger: 'Q',\r\n  id: 'Heater-1',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n}, {\r\n  keyCode: 87,\r\n  keyTrigger: 'W',\r\n  id: 'Heater-2',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n}, {\r\n  keyCode: 69,\r\n  keyTrigger: 'E',\r\n  id: 'Heater-3',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n}, {\r\n  keyCode: 65,\r\n  keyTrigger: 'A',\r\n  id: 'Heater-4',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n}, {\r\n  keyCode: 83,\r\n  keyTrigger: 'S',\r\n  id: 'Clap',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n}, {\r\n  keyCode: 68,\r\n  keyTrigger: 'D',\r\n  id: 'Open-HH',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n}, {\r\n  keyCode: 90,\r\n  keyTrigger: 'Z',\r\n  id: \"Kick-n'-Hat\",\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n}, {\r\n  keyCode: 88,\r\n  keyTrigger: 'X',\r\n  id: 'Kick',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n}, {\r\n  keyCode: 67,\r\n  keyTrigger: 'C',\r\n  id: 'Closed-HH',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n},\r\n];\r\n\r\nexport const addAllSounds = (all) => {\r\n  return ({\r\n    type: all,\r\n    soundData: bankSound\r\n  })\r\n}\r\n\r\nexport const addTrigger = (letter) => {\r\n  let indexLetter = keysTrigger.indexOf(letter);\r\n  return ({\r\n    type: letter,\r\n    soundData: bankSound[indexLetter] \r\n  });\r\n};\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Display = () => (\r\n  <div id=\"display\">\r\n\r\n  </div>\r\n)\r\n\r\nexport default Display;","import React from 'react';\r\nimport {ToggleButton, ToggleButtonGroup, } from 'react-bootstrap';\r\n\r\nconst Trigger = (props) => (\r\n  <div className=\"trigger\">\r\n    <ToggleButtonGroup type=\"radio\" name=\"soundBanks\" defaultValue={[1]}>\r\n      <ToggleButton className=\"toggleBotton\" value={1}> 1 </ToggleButton>\r\n      <ToggleButton value={2}> 2 </ToggleButton>\r\n    </ToggleButtonGroup>\r\n    \r\n  </div>\r\n)\r\n\r\nexport default Trigger;","import React from 'react';\r\n\r\nconst Buttons = ({dataUrl, letterVal, dataName, handleClickOfButtons, id}) => {\r\n  return (\r\n  <div \r\n    id={id}\r\n    data-letter={letterVal}\r\n    className='button drum-pad'  \r\n    data-name={dataName} \r\n    onClick={handleClickOfButtons}\r\n  >\r\n      {letterVal}\r\n      <audio className=\"clip\" src={dataUrl} id={letterVal}></audio>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport { Buttons };","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nimport  { keysTrigger } from '../actions';\r\n\r\nimport Display from './display';\r\nimport Trigger from './trigger';\r\nimport { Buttons } from './buttons';\r\n\r\n\r\nconst Main = (props) => {\r\n  console.log(props)\r\n  return (\r\n    <Container id='drum-machine'>\r\n      <Row className=\"align-items-center\">\r\n        <Col md={6} className='wrapper'>\r\n        { keysTrigger.map( (val, i) => (\r\n              <Buttons \r\n                key={i}\r\n                id={props.bankSound[i].id}\r\n                dataUrl={props.bankSound[i].url}\r\n                dataName={props.bankSound[i].id}\r\n                handleClickOfButtons={props.handleClick}\r\n                letterVal={val}\r\n              />\r\n            )\r\n          )\r\n        }\r\n        </Col>\r\n        <Col  md={6} className=\"\">\r\n          <Trigger />\r\n          <Display />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  ) \r\n}        \r\n\r\n\r\nexport default Main;","\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addTrigger, addAllSounds, keysTrigger } from '../actions';\r\nimport Main from '../components/main';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  \r\n\r\n  componentDidMount() {\r\n    console.log(\"mounted\")\r\n    document.addEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() { \r\n    console.log(\"unmounted\")\r\n    document.removeChild(\"keydown\", this.handleKeyDown);\r\n  }\r\n  //добаваляет слушатель события нажатия клавиши\r\n  handleKeyDown(e) {\r\n    console.log(e.key.toUpperCase());\r\n    if(keysTrigger.includes(e.key.toUpperCase())) {\r\n      playSound(e.key.toUpperCase());\r\n    }\r\n  }\r\n\r\n  // обрабатывает клик кнопки и вызывает функцию воспроизведения звука и вызывает функцию добавление названия звука\r\n  handleClick(e) {\r\n    console.log(e.target.dataset.letter)\r\n    playSound(e.target.dataset.letter)\r\n    displayNameOfSound(e.target.dataset.name)\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    console.log(this.props)\r\n    \r\n    return (\r\n    <Main \r\n      handleClick={this.handleClick}\r\n      addAllSounds={this.props.addAllSounds}\r\n      bankSound={this.props.state.bankSound}\r\n    />\r\n    )\r\n  }\r\n}\r\n\r\n//находит элемент аудио и воспроизводит звук\r\nfunction playSound(letter) {\r\n  let sound = document.getElementById(letter);\r\n  sound.play();\r\n}\r\n\r\n//нахожу display и отпраляю туда текст звука\r\nconst displayNameOfSound = (name) => {\r\n  let display = document.getElementById('display');\r\n  display.innerHTML = `<h3>${name}</h3>`;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {state};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    keyTrigger: (letter) => dispatch(addTrigger(letter)),\r\n    addAllSounds: (all) => dispatch(addAllSounds(all))\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","\r\nimport { keysTrigger, bankSound } from '../actions';\r\n\r\n\r\nconst initialState = { bankSound: bankSound};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  \r\n  if (keysTrigger.includes(action.type) ) {\r\n    return Object.assign({}, state, action.soundData);\r\n  } else if (action.type === \"ALL\") {\r\n    return Object.assign({}, state, action.soundData)\r\n  }\r\n\r\n  return state;\r\n  \r\n}\r\n\r\nexport default reducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './containers/MainContainer';\nimport reducer from './reducers/reducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}